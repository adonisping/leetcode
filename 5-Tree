五.
Tree

1.遍历_____________________________________________________________________________________________________
 
递归的三要素
 结束条件：也子节点，根节点
 |子问题划分，左子树右子树／根节点处理
 |子问题，左子树右子树
 |深度等，左右值的组合
 
 迭代版本需要记住
94. Binary Tree Inorder Traversal
￼
144. Binary Tree Preorder Traversal
￼
145. Binary Tree Postorder Traversal
￼

331. Verify Preorder Serialization of a Binary Tree

102. Binary Tree Level Order Traversal
107. Binary Tree Level Order Traversal II
￼
199. Binary Tree Right Side View
Binary Tree四周元素
二叉树的top view   /  down view 
513. Find Bottom Left Tree Value
103. Binary Tree Zigzag Level Order Traversal
515. Find Largest Value in Each Tree Row
Print Diagonal Traversal of Binary Tree
http://www.geeksforgeeks.org/diagonal-sum-binary-tree/

314 Binary Tree Vertical Order Traversal

100. Same Tree
101. Symmetric Tree 中序遍历为回文
￼

110. Balanced Binary Tree
 需要返回两个值
111. Minimum Depth of Binary Tree
￼
104. Maximum Depth of Binary Tree
366	Find Leaves of Binary Tree

508. Most Frequent Subtree Sum
222. Count Complete Tree Nodes

250 Count Univalue Subtrees
￼

Followup: Morris   O(1)空间


2.更改树__________________________________________________________________________________________________________________________________________

226. Invert Binary Tree

114. Flatten Binary Tree to Linked List
followup:构建成双向链表

116. Populating Next Right Pointers in Each Node
117. Populating Next Right Pointers in Each Node II
￼

105. Construct Binary Tree from Preorder and Inorder Traversal
106. Construct Binary Tree from Inorder and Postorder Traversal

156	Binary Tree Upside Down

297. Serialize and Deserialize Binary Tree
￼
Followup: 普通的多叉树怎么办
leetcode上用的的二叉树层次遍历序列化的方法，可以更省空间


补充之前漏掉的：
Check if given binary tree is complete binary tree or not
Find next node in same level for given node in a binary tree

3.BST__________________________________________________________________________________________________________________________________________
173. Binary Search Tree Iterator

98. Validate Binary Search Tree
255	Verify Preorder Sequence in Binary Search Tree 
 利用栈+最小值
 Followup: 中序，后序

333	Largest BST Subtree
99. Recover Binary Search Tree

108. Convert Sorted Array to Binary Search Tree
109. Convert Sorted List to Binary Search Tree

530. Minimum Absolute Difference in BST
270	 Closest Binary Search Tree Value
272	Closest Binary Search Tree Value II
Followup: 最小大于target的值 最大小于target的值
285	Inorder Successor in BST

230. Kth Smallest Element in a BST
Followup: 如果可以更改树，如何加快速度
501. Find Mode in Binary Search Tree
followup: 不是bst怎么办   如果只有一个mode可以用o（1）空间吗

450. Delete Node in a BST
449. Serialize and Deserialize BST

96. Unique Binary Search Trees
95. Unique Binary Search Trees II


4.路径问题__________________________________________________________________________________________________________________________________________
112. Path Sum
DFS程序模版
￼
113. Path Sum II
437. Path Sum III
404. Sum of Left Leaves

129. Sum Root to Leaf Numbers
124. Binary Tree Maximum Path Sum
257. Binary Tree Paths

298 Binary Tree Longest Consecutive Sequence
递增子序列  连续子序列


5.LCA问题_____________________________________________________________________
235. Lowest Common Ancestor of a Binary Search Tree
￼
236. Lowest Common Ancestor of a Binary Tree
￼
  Followup:
  如果不确定两个节点是否在树中存在怎么办
  如果有父节点指针怎么办
  多叉树怎么办
  找到多个人

  Find ancestors of given node in a Binary Tree
  
  
6.AST问题____________________________________________________________
224. Basic Calculator
227. Basic Calculator II
150. Evaluate Reverse Polish Notation

构建树——后续遍历得到逆波兰———栈解决（解释模式）
或者递归直接求解

7.Union Find问题______________________________________________________
323	Number of Connected Components in an Undirected Graph  
methods:  
union()  
public void union(int p, int q)  
{   
    // Give p and q the same root.  
    int pRoot = find(p);  
    int qRoot = find(q);  
    if (pRoot == qRoot)   
        return;  
    id[pRoot] = qRoot;    // 将一颗树(即一个组)变成另外一课树(即一个组)的子树  
    count--;  
}  
  
find()   
private int find(int p)  
{  
    while (p != id[p])  
    {  
        // 将p节点的父节点设置为它的爷爷节点  
        id[p] = id[id[p]];  
        p = id[p];  
    }  
    return p;  
}  
了解路径压缩算法   
  
connect()  
public boolean connected(int p, int q)  
{ return find(p) == find(q); }  
  
  
吊炸天写法  
def component(n, edges):  
  p = list(range(n))  
  for n1, n2 in edges:  
    while p[n1] != n1: n1 = p[n1]  
    while p[n2] != n2: n2 = p[n2]  
    if n1 != n2: 
       p[n2], n = n1, n, n - 1
  return n
  
  followup: 如何返回几大联通的区域
  
130. Surrounded Regions  
union find： 通过unionfind找出所有的联通0，如果四个方向有相当于有个虚拟的边，然后去掉四周的0区域，剩下的就是需要的区域  
更好的解法: 通过四周BFS或者dfs0换成其他字符#，然后遍历矩阵变0为1，然后讲#变回0
  
200. Number of Islands   
union find： 类似130，对所有联通的1进行合并。求1的数目    
其他解法： 对每个点进行dfs，dfs过程中把这个点变为0

261 Graph Valid Tree  两个条件必须满足： 
1.联通分量数为1《=》边的数目是n-1 2.不能有环 边上的两个点通过并查集不联通

305	Number of Islands II  
添加一块陆地那么陆地数目加1，但是可能与四周联通，分别与四周比较，如果发现不联通就进行合并，并且数目减少1
    
合并邮件问题:  
zhege  1@smu.edu 2@gmail.com
qifei  11@smu.edu
lizhe  1@smu.edu  
输出结果  [zhege, lizhe], [qifei]    
解法： 邮箱到人通过hash表 + 人合并通过union find来做
  
8.Binary Indexed Tree问题____________________________________________  

*303. Range Sum Query - Immutable 
区间求和／集合／最值问题
http://sighingnow.github.io/resource/binary_index_trees/binary_index_trees_1.png  
307. Range Sum Query - Mutable  
    def __init__(self, nums):
        self.nums = [0 for _ in nums]
        self.sms = [0 for _ in range(len(nums) + 1)]
        for i,m in enumerate(nums):
            self.update(i, m)
    
    def update(self, i, val):
        diff = val - self.nums[i]
        j = i + 1
        while j < len(self.sms):
            self.sms[j] += diff
            j += j & -j
        self.nums[i] = val
        return val
    
    def leftSum(self, i):
        j, res = i + 1, 0
        while j > 0:
            res += self.sms[j]
            j -= j & -j
        return res
        
    def sumRange(self, i, j):
        return self.leftSum(j) - self.leftSum(i-1)  
          
          
315. Count of Smaller Numbers After Self  
之前说过二分的做法  
如果用这个方法，需要对里面的值进行离散化（排序，然后从1开始数），然后把数值作为数的下标，那到一个数先查range，然后+1

*304. Range Sum Query 2D - Immutable  
注意矩阵求和的处理技巧：   
1.和一纬的一样，多一行和一列  2.如何左上角   3.如何利用已有算累计和

308 Range Sum Query 2D - Mutable   
二维的  
https://discuss.leetcode.com/uploads/files/1475260639048-screen-shot-2016-09-30-at-2.36.01-pm.png
    public void update(int row, int col, int val) {
        if (m == 0 || n == 0) return;
        int delta = val - nums[row][col];
        nums[row][col] = val;
        for (int i = row + 1; i <= m; i += i & (-i)) {
            for (int j = col + 1; j <= n; j += j & (-j)) {
                tree[i][j] += delta;
            }
        }
    }

493. Reverse Pairs  
315的变种


9.segment tree____________________________________________________ 
解决区间／线段上的最值／集合等问题  RMQ问题
http://www.cnblogs.com/wuyudong/p/segment-tree.html  
1.构建  
2.更新  
3.查询，每层最多2个继续往下走

307. Range Sum Query - Mutable  
308	Range Sum Query 2D - Mutable  
https://i.stack.imgur.com/RLasZ.png  
3Dsegment Tree
https://i.stack.imgur.com/OO7LN.jpg

239. Sliding Window Maximum    
最小队列／最大队列问题  
也可以用这个来做

315. Count of Smaller Numbers After Self   
注意查询条件的变化，如果树节点的值（最大值）小于当前值，那么直接算入范围，否则要二分查找
493. Reverse Pairs 

218. The Skyline Problem  
如果x轴范围很大，需要离散化    
扫描线+左节点更新值，右节点更新为0，同时查询整颗树的最大值

253. Meeting Rooms II
 

10.Trie Tree___________________________________

208. Implement Trie (Prefix Tree)  
    def insert(self, word):
        cur = self.root
        for w in word:
            cur = cur.children.setdefault(w, TrieNode())
        cur.isWord = True
        
    def search(self, word):
        cur = self.root
        for w in word:
            if w not in cur.children:
                return False
            cur = cur.children[w]
        return cur.isWord
        
    def startsWith(self, prefix):
        cur = self.root
        for w in prefix:
            if w not in cur.children:
                return False
            cur = cur.children[w]
        return True
  
  211. Add and Search Word - Data structure design
      简化写法  
      def __init__(self):
        self.root = {}
        
      def addWord(self, word):
        node = self.root
        for c in word:
            node = node.setdefault(c, {})
        node['#'] = '#'
      
   *79. Word Search  
   典型的DFS
   212. Word Search II
   先把字典建立trie tree，然后对矩阵中每个节点用trie去搜
   
   336. Palindrome Pairs   
   hashmap解法
   trie解法，原理：字符串的反序是能构成palindrom的前缀，trienode中存放该节点下面的树的总数。 拿每个字符串的逆序去查询它的前缀有多少个。
   
   搜索引擎快速提示的设计  
   followup：如果东西很多，一个机器装不下，分布式怎么做
   
   有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。
   
   
11.后缀树___________________________________
   后缀数组的简化解法
   求字符串中最长的重复字串  如abcdefgabcabcdffea  返回abcd
   followup:
   如果要求返回的串必须是连续的怎么办？通过下标控制，必须相邻，能否重合
   
   扩展应用：
   查找字符串o是否在字符串S中
   指定字符串T在字符串S中的重复次数
   DNA比对
  
12.优先队列heap___________________________________  
complete tree 
shift()
heapify()
pop()
push()


23. Merge k Sorted Lists   
二分法   
heap法，代码熟练掌握，类似的写法有很多 
需要搞明白压哪些数据（当前值，生成下一个值需要的参数）
        q = [(lst.val, lst) for lst in lists if lst]
        heapq.heapify(q)
        dummy = p = ListNode(0)
        while q:
            _, node = heapq.heappop(q)
            p.next, p = node, node
            if node.next:
                heapq.heappush(q, (node.next.val, node.next))
        return dummy.next

215. Kth Largest Element in an Array   
quick select方法   
heapify  然后pop k - 1个元素

218. The Skyline Problem     
用的很巧，因为只关注栈顶的元素，栈内部的元素在滑动窗口外部没有关系

239. Sliding Window Maximum   
思想同上一题，左指针收缩的时候判断栈顶元素距离当前元素的距离，大于k弹出

253	Meeting Rooms II     
利用queue获取当前最早的结束时间

*263. Ugly Number  

*264. Ugly Number II
虚拟的数组合并问题

313. Super Ugly Number   
queue中存放 当前的值（用于排序）， 质数（用于生成下一个），res下标

295. Find Median from Data Stream

347. Top K Frequent Elements    
桶排序  hashmap统计出次数，然后桶排序，桶的大小为数据原数组大小   
用queue

355. Design Twitter  
push + poll    
多个人id的合并

358	Rearrange String k Distance Apart    
hashmap统计出现次数  queue维护出现次数  每次从queue中popk个最多的字符  然后重新放回queue进行下一轮

378. Kth Smallest Element in a Sorted Matrix
典型问题，代码要熟悉
        q = [(matrix[0][0], 0, 0)]
        for _ in range(k - 1):
            _, i, j = heapq.heappop(q)
            if j == 0 and i + 1 < len(matrix):
                heapq.heappush(q, (matrix[i+1][j], i + 1, j))
            if j + 1 < len(matrix[0]):
                heapq.heappush(q, (matrix[i][j+1], i, j + 1))
        return heapq.heappop(q)[0]

373. Find K Pairs with Smallest Sums    

407. Trapping Rain Water II

451. Sort Characters By Frequency  
hashmap统计出现次数

502. IPO   
贪心+队列
378. Kth Smallest Element in a Sorted Matrix

k closest points to (0,0)
